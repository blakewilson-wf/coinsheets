/* 
 * Workiva Developer API
 *
 * APIs provided for 3rd party integrations. Build: c0ca649
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
)

type AuthenticationApi struct {
	Configuration Configuration
}

func NewAuthenticationApi() *AuthenticationApi {
	configuration := NewConfiguration()
	return &AuthenticationApi{
		Configuration: *configuration,
	}
}

func NewAuthenticationApiWithBasePath(basePath string) *AuthenticationApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &AuthenticationApi{
		Configuration: *configuration,
	}
}

/**
 * Create an OAuth bearer token.
 * Given a valid client_id and client_secret, create a bearer token for the current user. 
 *
 * @param clientId The users client id.
 * @param clientSecret The users client secret.
 * @param grantType The grant type for the Bearer token. Must be client_credentials.
 * @param xApiKey API callers are identified by API keys. Throttling and request quota limits are set for each individual API key.  
 * @param contentType Mime type of request body.
 * @param accept The requested content type. For example, application/json. Per the HTTP guidelines, this is just a hint and responses MAY have a  different content type. 
 * @return *BearerToken
 */
func (a AuthenticationApi) Oauth2TokenPost(clientId string, clientSecret string, grantType string, xApiKey string, contentType string, accept string) (*BearerToken, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/oauth2/token"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Content-Type"
	headerParams["Content-Type"] = contentType
	// header params "Accept"
	headerParams["Accept"] = accept
	// header params "X-Api-Key"
	headerParams["X-Api-Key"] = xApiKey


	formParams["clientId"] = clientId
	formParams["clientSecret"] = clientSecret
	formParams["grantType"] = grantType
	var successPayload = new(BearerToken)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

